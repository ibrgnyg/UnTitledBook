@{
    ViewData["Title"] = "Friends";
}


<div class="container light-style flex-grow-1 container-p-y">
    <div class="card overflow-hidden">
        <div class="row no-gutters row-bordered row-border-light">
            <div class="col-md-3 pt-0">
                <div class="list-group list-group-flush account-settings-links">
                    <a class="list-group-item list-group-item-action active" href="/user/profile">Profil</a>
                    <a class="list-group-item list-group-item-action" href="/user/profile#account-change-password">Şifre değiştir</a>
                    <a class="list-group-item list-group-item-action" href="/book">Kitaplar</a>
                    <a class="list-group-item list-group-item-action" href="/user/friends">Arkadaşlar</a>
                    <a class="list-group-item list-group-item-action" href="/book/sharedbooknotes">Paylaşılan notlar</a>
                    <a class="btn btn-primary btn-sm" onclick="logout()">Çıkış yap</a>
                </div>
            </div>
            <div class="col-md-9">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a class="nav-link active" id="tab1-link" onclick="showTab(event, 'tab1')">Arkadaş listesi</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="tab2-link" onclick="showTab(event, 'tab2')">Kullanıcılar</a>
                    </li>
                </ul>
                <div id="tab1" class="tab-content">
                    <div class="row">
                        <div class="col-md-8">
                            <ul class="list-group" id="friendList">
                            </ul>
                        </div>
                    </div>
                </div>
                <div id="tab2" class="tab-content" style="display: none;">
                    <p>Note içeriği</p>
                    <div class="container mt-4">
                        <div class="row align-items-center mb-4">
                            <div class="col-md-6 col-lg-4 mb-3 mb-md-0">
                                <div class="input-group">
                                    <input type="text" class="form-control" id="searchInput" name="searchInput" placeholder="Kullanıcı ismi ara" onkeydown="handleKeyDown(event)">
                                    <div class="input-group-append">
                                        <button class="btn btn-primary" type="button" onclick="searchUsers()">Ara</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <ul class="list-group" id="userList">
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    var userId = localStorage.getItem('userId');
    var token = localStorage.getItem('token');
    window.onload = function () {

        if (userId == null || token == null) {
            window.location.href = "/user/login";
            return;
        }

        getFriends();
    };

    function searchUsers() {
        const searchTerm = $("#searchInput").val();

        if (searchTerm) {
            let url = `/api/User/searchUsers?username=${searchTerm}`;

            axios.get(url, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(response => {
                    const users = response.data;
                    console.log(users);
                    renderUsers(users);
                })
                .catch(error => {
                    console.error('Error searching users:', error);
                });
        }
    }

    function renderUsers(users) {
        const userList = document.getElementById('userList');
        userList.innerHTML = '';

        users.forEach(user => {
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item';
            listItem.innerHTML = `
                                            <div>
                                                <img src="${user.imagePath}" alt="User Image" class="user-image">
                                                ${user.userName}
                                            </div>
                     <button class="btn btn-primary" onclick="addFriends('${user.id}');">Ekle</button>
                                        `;
            userList.appendChild(listItem);
        });
    }

    function handleKeyDown(event) {
        if (event.key === 'Enter') {
            searchUsers();
        }
    }

    function addFriends(id) {
        debugger;
        let model = {
            UserId: userId,
            FriendsId: id,
        };
        axios.post('/api/Friend/addFriend', model, {
            headers: {
                'Authorization': 'Bearer ' + token
            }
        }).then(function (response) {
            console.log(response);
            if (!response.data.isError) {
                Toastify({
                    text: response.data.message,
                    duration: 3000,
                    newWindow: true,
                    close: true,
                    gravity: "top",
                    position: "right",
                    stopOnFocus: true,
                    backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
                }).showToast();
                getFriends();
            } else {
                Toastify({
                    text: response.data.message,
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(to right, #ff4b1f, #ff9068)",
                    stopOnFocus: true
                }).showToast();
            }
        }).catch(function (error) {
            console.error('Axios error:', error);
        });
    }

    function getFriends() {

        axios.get(`/api/Friend/friendsLists/${userId}`, {
            headers: {
                'Authorization': 'Bearer ' + token
            }
        })
            .then(response => {
                const friends = response.data;
                console.log(friends);
                renderFriends(friends);
            })
            .catch(error => {
                console.error('Error searching users:', error);
            });

    }

    function renderFriends(friends) {
        const friendList = document.getElementById('friendList');
        friendList.innerHTML = '';

        friends.forEach(friend => {
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item';
            listItem.innerHTML = `
                             <div>
                             <img src="${friend.friend.imagePath}" alt="User Image" class="user-image">
                             ${friend.friend.userName}
                             </div>
                          <button class="btn btn-danger" onclick="removeFriends('${friend.id}');">Sil</button>
                                            `;
            friendList.appendChild(listItem);
        });
    }

    function removeFriends(id) {
        if (confirm("Arkadaşı silmek istedigine emin misiniz?")) {
            axios.delete(`/api/Friend/deleteFriends/${id}`, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            }).then(response => {
                console.log(response.data);
                if (!response.data.isError) {

                    Toastify({
                        text: response.data.message,
                        duration: 3000,
                        newWindow: true,
                        close: true,
                        gravity: "top",
                        position: "right",
                        stopOnFocus: true,
                        backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
                    }).showToast();

                    getFriends();
                }
                else {
                    Toastify({
                        text: response.data.message,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(to right, #ff4b1f, #ff9068)",
                        stopOnFocus: true
                    }).showToast();
                }
            })
                .catch(error => {
                    console.error('Arkadaş silinirken hata oluştu:', error);
                });
        } else {
            console.log(`Arkadaşı silme işlemi iptal edildi: ${id}`);
        }
    }


    function showTab(event, tabId) {
        event.preventDefault();

        const tabLinks = document.querySelectorAll('.nav-link');
        tabLinks.forEach(link => link.classList.remove('active'));

        event.currentTarget.classList.add('active');

        const tabContents = document.querySelectorAll('.tab-content');
        tabContents.forEach(content => content.style.display = 'none');

        const selectedTab = document.getElementById(tabId);
        selectedTab.style.display = 'block';
    }

    function logout() {
        localStorage.removeItem('userId');
        localStorage.removeItem('token');
        localStorage.removeItem('currentUser');
        window.location.href = "/user/login";
    }

</script>
