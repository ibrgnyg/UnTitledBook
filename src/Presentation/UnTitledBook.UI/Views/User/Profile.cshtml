@{
    ViewData["Title"] = "Profile";
}

<div class="container light-style flex-grow-1 container-p-y">
    <div class="card overflow-hidden">
        <div class="row no-gutters row-bordered row-border-light">
            <div class="col-md-3 pt-0">
                <div class="list-group list-group-flush account-settings-links">
                    <a class="list-group-item list-group-item-action active" data-toggle="list" href="#account-general">Profil</a>
                    <a class="list-group-item list-group-item-action" data-toggle="list" href="#account-change-password">Şifre degiştir</a>
                    <a class="list-group-item list-group-item-action" href="/book">Kitaplar</a>
                    <a class="list-group-item list-group-item-action" href="/user/friends">Arkadaşlar</a>
                    <a class="list-group-item list-group-item-action" href="/book/sharedbooknotes">Paylaşılan notlar</a>
                    <a class="btn btn-primary btn-sm" onclick="logout()">Çıkış yap</a>
                </div>
            </div>
            <div class="col-md-9">
                <div class="tab-content">
                    <div class="tab-pane fade active show" id="account-general">

                        <div class="card-body media align-items-center">
                            <img id="preview" alt="Preview Image" class="d-block ui-w-80">

                            <div class="media-body ml-4">
                                <label class="btn btn-outline-primary">
                                    Profil resmi yükle
                                    <input type="file" id="fileInput" accept="image/*" onchange="previewImage(event)" class="account-settings-fileinput">
                                </label> 
                                <div class="text-light small mt-1">Sadece JPG, veya PNG</div>
                            </div>
                        </div>
                        <hr class="border-light m-0">

                        <div class="card-body">
                            <div class="form-group">
                                <label class="form-label">Kullanıcı ismi</label>
                                <input type="text" class="form-control mb-1" id="username" name="username">
                            </div>
                            <div class="form-group">
                                <label class="form-label">E-posta</label>
                                <input type="text" class="form-control mb-1" id="email" name="email" disabled>
                                <span>Not: E-posta degiştirilemez!</span>
                            </div>
                            <div class="text-right mt-3">
                                <button type="button" class="btn btn-primary" onclick="updateProfile();">Kaydet</button>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="account-change-password">
                        <div class="card-body pb-2">

                            <div class="form-group">
                                <label class="form-label">Current password</label>
                                <input type="password" class="form-control" id="oldpassword" name="oldpassword">
                            </div>

                            <div class="form-group">
                                <label class="form-label">New password</label>
                                <input type="password" class="form-control" id="newpassword" name="newpassword">
                            </div>

                            <div class="text-right mt-3">
                                <button type="button" class="btn btn-primary" onclick="updateChangePassword();">Kaydet</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    var userId = localStorage.getItem('userId');
    var token = localStorage.getItem('token');
    window.onload = function () {

        if (userId == null || token == null) {
            window.location.href = "/user/login";
            return;
        }
        getUser();
    };

    function getUser() {
        axios.get('/api/User/user/' + userId, {
            headers: {
                'Authorization': 'Bearer ' + token
            }
        })
            .then(response => {
                if (response.data == null || response.data=="") {
                    logout();
                    return;
                }

                console.log('GET isteği başarılı:', response.data);
                var userJson = JSON.stringify(response.data);

                localStorage.setItem('currentUser', userJson);

                var storedUserJson = localStorage.getItem('currentUser');
                var storedUser = JSON.parse(storedUserJson);

                $("#username").val(storedUser.userName);
                $("#email").val(storedUser.email);
                $("#preview").attr("src", storedUser.imagePath);
            })
            .catch(error => {
                console.error('GET isteği başarısız:', error.message);
                window.location.href = "/user/login";
            });

    }

    function updateProfile() {
        const fileInput = document.getElementById('fileInput');
        const file = fileInput.files[0];

        let model = {
            UserId: localStorage.getItem('userId'),
            UserName: $("#username").val(),
            File: file
        };

        axios.put('/api/User/updateProfile', model, {
            headers: {
                'Content-Type': 'multipart/form-data',
                'Accept': 'text/plain',
                'Authorization': 'Bearer ' + token
            }
        })
            .then(function (response) {
                console.log(response);
                if (!response.data.isError) {
                    Toastify({
                        text: response.data.message,
                        duration: 3000,
                        newWindow: true,
                        close: true,
                        gravity: "top",
                        position: "right",
                        stopOnFocus: true,
                        backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
                    }).showToast();
                    getUser();
                }
                else {
                    Toastify({
                        text: response.data.message,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(to right, #ff4b1f, #ff9068)",
                        stopOnFocus: true
                    }).showToast();
                }
            })
            .catch(function (error) {
                console.error('Axios error:', error);
            });
    }

    function updateChangePassword() {
        let model = {
            UserId: userId,
            OldPassword: $("#oldpassword").val(),
            NewPassword: $("#newpassword").val(),
        };

        axios.put('/api/User/changePassword', model, {
            headers: {
                'Authorization': 'Bearer ' + token
            }
        })
            .then(function (response) {
                console.log(response);
                if (!response.data.isError) {
                    Toastify({
                        text: response.data.message,
                        duration: 3000,
                        newWindow: true,
                        close: true,
                        gravity: "top",
                        position: "right",
                        stopOnFocus: true,
                        backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
                    }).showToast();
                }
                else {
                    Toastify({
                        text: response.data.message,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(to right, #ff4b1f, #ff9068)",
                        stopOnFocus: true
                    }).showToast();
                }
            })
            .catch(function (error) {
                console.error('Axios error:', error);
            });
    }


    function previewImage(event) {
        var input = event.target;
        var image = document.getElementById('preview');
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                image.src = e.target.result;
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    function logout() {
        localStorage.removeItem('userId');
        localStorage.removeItem('token');
        localStorage.removeItem('currentUser');
        window.location.href = "/user/login";
    }

</script>
