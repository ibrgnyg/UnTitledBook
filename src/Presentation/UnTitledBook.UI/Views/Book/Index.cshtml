@{
    ViewData["Title"] = "Kitaplar";
}

<div class="container light-style flex-grow-1 container-p-y">
    <div class="card overflow-hidden">
        <div class="row no-gutters row-bordered row-border-light">
            <div class="col-md-3 pt-0">
                <div class="list-group list-group-flush account-settings-links">
                    <a class="list-group-item list-group-item-action active" href="/user/profile">Profil</a>
                    <a class="list-group-item list-group-item-action" href="/user/profile#account-change-password">Şifre değiştir</a>
                    <a class="list-group-item list-group-item-action" href="/book">Kitaplar</a>
                    <a class="list-group-item list-group-item-action" href="/user/friends">Arkadaşlar</a>
                    <a class="list-group-item list-group-item-action" href="/book/sharedbooknotes">Paylaşılan notlar</a>
                    <a class="btn btn-primary btn-sm" onclick="logout()">Çıkış yap</a>
                </div>
            </div>
            <div class="col-md-9">
                <div class="tab-content">
                    <div class="tab-pane fade active show" id="account-general">
                        <div class="row align-items-center mb-4">
                            <div class="col-md-6 col-lg-4 mb-3 mb-md-0">
                                <div class="input-group">
                                    <input type="text" class="form-control" id="searchInput" name="searchInput" placeholder="Kitap adıyla ara" onkeydown="handleKeyDown(event)">
                                    <div class="input-group-append">
                                        <button class="btn btn-primary" type="button" onclick="searchBooks()">Ara</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 col-lg-4 mb-3 mb-md-0">
                                <select class="form-control" id="filterSelect" onchange="handleFilterChange();">
                                    <option value="0" selected>En yeni</option>
                                    <option value="1">En eski</option>
                                </select>
                            </div>
                            <div class="col-lg-4 text-md-right">
                                <a class="btn btn-primary btn-sm" href="/book/create" role="button">Kitap Ekle</a>
                            </div>
                        </div>
                        <table class="table table-bordered table-dark">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Resim</th>
                                    <th scope="col">Kitap ismi</th>
                                    <th scope="col">Yazar</th>
                                    <th scope="col">Eklenme tarihi</th>
                                    <th scope="col">İşlemler</th>
                                </tr>
                            </thead>
                            <tbody id="bookList">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var userId = localStorage.getItem('userId');
    var token = localStorage.getItem('token');
    window.onload = function () {

        if (userId == null || token == null) {
            window.location.href = "/user/login";
            return;
        }
        fetchBooks();
    };

    function fetchBooks() {
        const dateFilterType = document.getElementById('filterSelect').value;

        axios.get(`/api/Book?UserId=${userId}&FilterDate=${dateFilterType}`, {
            headers: {
                'Authorization': 'Bearer ' + token
            }
        })
            .then(response => {
                const books = response.data;
                renderBooks(books);
                document.getElementById("loading").classList.add("d-none");
            })
            .catch(error => {
                console.error('Error fetching books:', error);
            });
    }

    function renderBooks(books) {
        const bookList = document.getElementById('bookList');
        bookList.innerHTML = '';

        books.forEach((book, index) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                    <th scope="row">${index}</th>
                    <td>
                        <img src="${book.imagePath}" alt="Book Cover" style="width: 50px; height: 50px;">
                    </td>
                    <td>${book.name}</td>
                    <td>${book.author}</td>
                    <td>${formatDate(book.createdDate)}</td>
                    <td>
                        <a class="btn btn-primary btn-sm" href="/book/edit?id=${book.id}" role="button">Düzenle</a>
                        <button class="btn btn-danger btn-sm" onclick="confirmDelete('${book.id}');">Sil</button>
                    </td>
                `;
            bookList.appendChild(row);
        });
    }

    function searchBooks() {
        const searchTerm = $("#searchInput").val();
        const dateFilterType = document.getElementById('filterSelect').value;

        if (searchTerm) {
            let url = `/api/Book?UserId=${userId}&FilterDate=${dateFilterType}`;
            if (searchTerm) {
                url += `&SearchTerm=${searchTerm}`;
            }

            axios.get(url, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(response => {
                    const books = response.data;
                    renderBooks(books);
                    $("#loading").addClass("d-none");
                })
                .catch(error => {
                    console.error('Error searching books:', error);
                });
        } else {
            fetchBooks();
        }
    }

    function handleFilterChange() {
        fetchBooks();
    }

    function formatDate(inputDate) {
        const date = new Date(inputDate);
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        return date.toLocaleDateString('tr-TR', options);
    }

    function handleKeyDown(event) {
        if (event.key === 'Enter') {
            searchBooks();
        }
    }



    function confirmDelete(id) {
        if (confirm("Bu kitabı silmek istediğinizden emin misiniz?")) {
            axios.delete(`/api/Book/deleteBook/${id}`, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(response => {
                    console.log(response.data);
                    if (!response.data.isError) {
                        Toastify({
                            text: response.data.message,
                            duration: 3000,
                            newWindow: true,
                            close: true,
                            gravity: "top",
                            position: "right",
                            stopOnFocus: true,
                            backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
                        }).showToast();
                        fetchBooks(); // Kitapları yeniden yükleme işlevini çağırın
                    } else {
                        Toastify({
                            text: response.data.message,
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "linear-gradient(to right, #ff4b1f, #ff9068)",
                            stopOnFocus: true
                        }).showToast();
                    }
                })
                .catch(error => {
                    console.error('Kitap silinirken hata oluştu:', error);
                });
        } else {
            console.log(`Kitap silme işlemi iptal edildi: ${id}`);
        }
    }

    function logout() {
        localStorage.removeItem('userId');
        localStorage.removeItem('token');
        localStorage.removeItem('currentUser');
        window.location.href = "/user/login";
    }

</script>

